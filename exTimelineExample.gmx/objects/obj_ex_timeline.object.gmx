<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// properties
_ex_timelines = -1;
_ex_timeline_classes = -1;
_ex_timeline_debug_mode = false;
_suspended = false;
_version = "1.0.5";

// extension database
enum _ex_timeline {
    _name,
    _position,
    _position_previous,
    _speed,
    _is_playing,
    _is_paused,
    _sync,
    _oncomplete,
    _oncomplete_arguments,
    _duration,
    _loop,
    _local,
    _position_floored,
    _position_previous_floored,
    _sync_delta,
    _length
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update timelines

if (_suspended == true) {
    exit;
}


// count timelines
if (not ds_exists(_ex_timelines, ds_type_grid)) {
    exit;
}

var _ds_height = ds_grid_height(_ex_timelines);
if (_ds_height &lt; 2) {

    if (_ex_timelines[# 0, 0] == "") {
        exit;
    }

}

var _ex_timeline_count = ds_grid_height(_ex_timelines);

while (--_ex_timeline_count &gt;= 0) {

    var _i = _ex_timeline_count;

    var _name = _ex_timelines[# _ex_timeline._name, _i];
    
    var _y = ds_grid_value_y(_ex_timelines, 0, 0, 1, ds_grid_height(_ex_timelines), _name);
    
    if (_y &lt; 0) {
        continue;
    }
    
    // check paused or playing states
    if (_ex_timelines[# _ex_timeline._is_paused, _y] == true or not _ex_timelines[# _ex_timeline._is_playing, _y] == true) {
        continue;
    }
    
    // get values from grid
    var _timeline_speed                     = _ex_timelines[# _ex_timeline._speed, _y];
    var _timeline_loop                      = _ex_timelines[# _ex_timeline._loop, _y];
    var _timeline_position                  = _ex_timelines[# _ex_timeline._position, _y];
    var _timeline_position_previous         = _ex_timelines[# _ex_timeline._position_previous, _y];
    var _timeline_position_floored          = _ex_timelines[# _ex_timeline._position_floored, _y];
    var _timeline_position_previous         = _ex_timelines[# _ex_timeline._position_previous, _y];
    var _timeline_position_previous_floored = _ex_timelines[# _ex_timeline._position_previous_floored, _y];
    var _timeline_duration                  = _ex_timelines[# _ex_timeline._duration, _y];
    var _timeline_sync_delta                = _ex_timelines[# _ex_timeline._sync_delta, _y];
    
    // debug:
    //_timeline_speed = 0.6; // works
    //_timeline_speed = 1; // works
    //_timeline_speed = 1.6; // works
    //_timeline_speed = 30; // works
    
    //_timeline_sync_delta = 1;
    //_timeline_loop = 1;
    
    // sync to delta if applicable
    if (_timeline_sync_delta == true) {
        _timeline_speed *= (delta_time / (1000000 / room_speed));
    }
        
    // update position
    _timeline_position += _timeline_speed;
    
    if (_timeline_position &gt;= _timeline_duration) {
        _timeline_position = _timeline_duration;
    }
    
    _timeline_position_floored = floor(_timeline_position);
    _ex_timelines[# _ex_timeline._position_floored, _y] = _timeline_position_floored;
    
    // update position in grid
    _ex_timelines[# _ex_timeline._position, _y] = _timeline_position;
    
    // debug:
    //ds_list_add(global._position, _timeline_position);
    
    // tick frame
    if (_timeline_position_floored &gt; _timeline_position_previous_floored) {
    
        // update previous floored value in grid
        _ex_timelines[# _ex_timeline._position_previous_floored, _y] = _timeline_position_floored;
        
        var _past        = _timeline_position_previous_floored;
        var _future      = _timeline_position_floored;
        var _difference  = _future-_past;
        
        // check for difference between current frame and previous position
        if (_difference &gt; 1) {
        
            // debug:
            //show_debug_message("@pos: "+string(_timeline_position)+", looping from: "+string(_past)+" to "+string(_future));
            
            // loop through previous frames and execute scripts if applicable
            for (var _i=_past+1; _i&lt;=_future; _i++) {
                
                // debug
                //ds_list_add(global._position_floored, _i);
                
                // update position in grid while looping
                _ex_timelines[# _ex_timeline._position, _y] = _timeline_position;
                _ex_timelines[# _ex_timeline._position_floored, _y] = _i;
                
                // execute scripts if applicable /////////////////////////
                    var _script      = -1;
                    var _script_args = -1;
                            
                    var _dsmap       = _ex_timelines[# _ex_timeline._oncomplete, _y];
                    var _dsmap2      = _ex_timelines[# _ex_timeline._oncomplete_arguments, _y];
                    
                    _ex_timelines[# _ex_timeline._position, _y] = _timeline_position;
                    _ex_timelines[# _ex_timeline._position_floored, _y] = _i;
                    
                    if (ds_map_exists(_dsmap, _i)) {
                        _script =  ds_map_find_value(_dsmap, _i);
                    }
                            
                    if (ds_map_exists(_dsmap2, _i)) {
                        _script_args =  ds_map_find_value(_dsmap2, _i);
                    }
                    
                    if (_script &gt; -1) {

                        // debug
                        //show_debug_message("(looped) EXECUTE SCRIPT AT: "+string(_i)+"");
                        
                        if (is_real(_script_args) or is_string(_script_args)) {
                        
                        if (_script_args != ex_timeline_arguments_undefined) {
                            script_execute(_script, _script_args);
                        } else {
                            script_execute(_script);    
                        }
                        
                        } else if (is_array(_script_args)) {
                        
                        
                        var _length = array_length_1d(_script_args);
                        
                        switch (_length) {
                            case 0: script_execute(_script); break;
                            case 1: script_execute(_script, _script_args[0]); break;
                            case 2: script_execute(_script, _script_args[0], _script_args[1]); break;
                            case 3: script_execute(_script, _script_args[0], _script_args[1], _script_args[2]); break;
                            case 4: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3]); break;
                            case 5: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4]); break;
                            case 6: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5]); break;
                            case 7: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6]); break;
                            case 8: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6], _script_args[7]); break;
                            case 9: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6], _script_args[7], _script_args[8]); break;
                            // ...
                            default: 
                                if (ex_timeline_get_debug_mode()) {
                                    show_debug_message('exTimeline: Error in timeline with name: "'+string( _name )+'", script to trigger has too few (less than 0) or too many arguments (max 9 [0-8] allowed)');
                                }
                                break;
                        }
                        
                        } else {
                            script_execute(_script);
                        }
                        
                    }
                
            }
            
        } 
        else {
            
            // debug:
            //ds_list_add(global._position_floored, _timeline_position_floored);
            
            // no difference found, just execute script if applicable
            // execute scripts if applicable /////////////////////////
                var _script      = -1;
                var _script_args = -1;
                        
                var _dsmap       = _ex_timelines[# _ex_timeline._oncomplete, _y];
                var _dsmap2      = _ex_timelines[# _ex_timeline._oncomplete_arguments, _y];
                        
                if (ds_map_exists(_dsmap, _timeline_position_floored)) {
                    _script =  ds_map_find_value(_dsmap, floor(_timeline_position));
                }
                        
                if (ds_map_exists(_dsmap2, _timeline_position_floored)) {
                    _script_args =  ds_map_find_value(_dsmap2, floor(_timeline_position));
                }
                
                if (_script &gt; -1) {
                    //show_debug_message("(single) EXECUTE SCRIPT AT: "+string(_timeline_position)+"");
                    if (is_real(_script_args) or is_string(_script_args)) {
                    
                    if (_script_args != ex_timeline_arguments_undefined) {
                        script_execute(_script, _script_args);
                    } else {
                        script_execute(_script);    
                    }
                    
                    } else if (is_array(_script_args)) {
                    
                    var _length = array_length_1d(_script_args);
                    
                    switch (_length) {
                        case 0: script_execute(_script); break;
                        case 1: script_execute(_script, _script_args[0]); break;
                        case 2: script_execute(_script, _script_args[0], _script_args[1]); break;
                        case 3: script_execute(_script, _script_args[0], _script_args[1], _script_args[2]); break;
                        case 4: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3]); break;
                        case 5: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4]); break;
                        case 6: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5]); break;
                        case 7: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6]); break;
                        case 8: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6], _script_args[7]); break;
                        case 9: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6], _script_args[7], _script_args[8]); break;
                        // ...
                        default: 
                            if (ex_timeline_get_debug_mode()) {
                                show_debug_message('exTimeline: Error in timeline with name: "'+string( _name )+'", script to trigger has too few (less than 0) or too many arguments (max 9 [0-8] allowed)');
                            }
                            break;
                    }
                    
                    } else {
                        script_execute(_script);
                    }
                    
                }
            
        }
        
    }
    
    // current position is over duration, stop playback
    if (_timeline_position &gt;= _timeline_duration) {
        
        if (_timeline_loop == true) {
            
            _timeline_position = -1;
            _ex_timelines[# _ex_timeline._position,   _y] = -1;
            _ex_timelines[# _ex_timeline._position_floored, _y] = -1;
            _ex_timelines[# _ex_timeline._position_previous,   _y] = -1;
            _ex_timelines[# _ex_timeline._position_previous_floored, _y] = -1;
            
            if (ex_timeline_get_debug_mode()) {
                show_debug_message('exTimeline: timeline with name: "'+string( _name )+'" ended playback, looping back to start');
             }
                    
        } else {
        
            _ex_timelines[# _ex_timeline._position,   _y]                = _timeline_duration;
            _ex_timelines[# _ex_timeline._position_floored, _y]          = floor(_timeline_duration);
            _ex_timelines[# _ex_timeline._position_previous,   _y]       = _timeline_duration-1;
            _ex_timelines[# _ex_timeline._position_previous_floored, _y] = floor(_timeline_duration)-1;
            _ex_timelines[# _ex_timeline._is_playing, _y]                = false;
            
            if (ex_timeline_get_debug_mode()) {
                show_debug_message('exTimeline: timeline with name: "'+string( _name )+'" ended playback');
             }
        }
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
